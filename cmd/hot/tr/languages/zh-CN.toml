"hot - Git repositories maintenance tool" = "hot - Git 存储库维护工具"
"Show context-sensitive help" = "显示上下文相关的帮助"
"Make the operation more talkative" = "展示操作的更多细节"
"Show version number and quit" = "展示版本信息并退出"
"Enable debug mode; analyze timing" = "开启调试模式分析时间消耗"
"Commands:" = "命令："
"Arguments:" = "参数："
"Flags:" = "标志："
"Usage: " = "用法："
"   or: " = "  或："
"Aborting" = "正在终止"
"error: " = "错误："
"fatal: " = "致命错误："
"hint: " = "提示："
"Run \"%s --help\" for more information." = "运行 \"%s --help\" 以获取更多信息。"
"Run \"%s <command> --help\" for more information on a command." = "运行 \"%s <command> --help\" 以获取有关命令的更多信息。"
"Show repositories size and large files" = "展示存储库体积和大文件"
"Remove files in repository and rewrite history" = "删除存储库中的文件并重写历史"
"List references in a local repository" = "列出本地存储库中的引用"
"Sort by time from oldest to newest" = "按照时间从旧到新排序"
"Interactive mode to clean repository large files" = "交互模式清理存储库大文件"
"Interactive mode to clean repository large files (Grafting mode)" = "交互模式清理存储库大文件（嫁接模式）"
"Prune repository when commits are rewritten" = "提交被重写后修剪存储库"
"Grafting mode" = "嫁接模式"
"Graft only the default branch" = "仅嫁接默认分支"
"Remove all large blobs" = "删除所有大文件"
"Path to repositories" = "存储库路径"
"Large file limit size, supported units: KB,MB,GB,K,M,G" = "大文件限制大小，支持的单位有：KB,MB,GB,K,M,G"
"Whether large files exist in the default branch" = "大文件是否与存在于默认分支"
"Specify repository location" = "指定存储库位置"
"Matching pattern, all references are displayed by default" = "匹配模式，默认展示所有引用"
"Path to remove in repository, support wildcards" = "存储库中需要删除的路径, 支持 Git 风格通配符"
"Confirm rewriting local branches and tags" = "确认重写本地分支和标签（默认 false）"
"Descending order by total size" = "按总大小降序排列"
"All Branches and Tags" = "所有的分支和标签"
"Default Branch" = "默认分支"
"Show default branch large files:" = "展示默认分支大文件："
"Which files need to be deleted" = "哪些文件需要删除"
"Batch" = "批次"
"You can increase the file size limit, the number of large files:" = "你可以调高文件大小限制，大文件数量："
"The total number of files that will be deleted is:" = "将要删除的文件总数为："
Path = "路径"
"Cumulative Size" = "累计大小"
Repository = "存储库"
Modifications = "修改次数"
size = "大小"
"Do you want to rewrite local branches and tags" = "是否重写本地分支和标签"
"rewrite commits" = "重写提交"
"rewrite references" = "重写引用"
"processing completed" = "处理完成"
"graft commits" = "嫁接提交"
"total" = "总计"
"Do you want to prune the repository right away" = "是否马上修剪存储库"
"Repository not bare repository, continue to rewrite" = "此存储库不是裸存储库，是否继续执行"
"Matched references: " = "匹配到的引用："
"Reference Name" = "引用名称"
Hash = "哈希"
Leading = "领先"
Lagging = "落后"
Date = "日期"
"reference is broken" = "引用已损坏"
"scan references" = "扫描引用"
"Clean up expired references" = "清理过期引用"
"Only clean up merged branches, ignoring expiration times" = "仅清理被合并的分支，忽略过期时间"
"Clean up expired Tags, off by default" = "清理过期的标签，默认不清理"
"Reference expiration time, support: m, h, d, w" = "引用过期时间，支持：m, h, d, w （分钟/小时/天/周）"
"Migrate a repository to the specified object format" = "迁移存储库对象格式到指定对象格式"
"migrate repository from %s to %s success, spent: %v\n" = "成功将存储库对象格式从 %s 迁移到 %s, 耗时: %v\n"
"Specifying the object format, support only: sha1 or sha256" = "指定对象格式，仅支持：sha1 or sha256"
"Original repository remote URL (or filesystem path)" = "原始存储库远程 URL（或文件系统路径）"
"Destination where the repository is migrated" = "迁移完的存储库目的地"
"Save as a bare git repository" = "保存为裸 Git 存储库"
"fast rewrite objects" = "快速重写 objects"
"Clones a repository into a newly created directory" = "将存储库克隆到新创建的目录中"
"Original repository remote URL" = "原始存储库远程地址"
"Destination for the new repository" = "新存储库的目的地"
"migrate repository to %s success, spent: %v\n" = "成功将存储库对象格式迁移到 %s, 耗时: %v\n"
"A subset of repository files, all files are checked out by default" = "存储库文件的子集，默认检出所有文件"
"Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to <name> branch instead" = "不要将新创建的 HEAD 指向克隆存储库 HEAD 所指向的分支，而是指向 <name> 分支"
"Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to <name> commit instead" = "不要将新创建的 HEAD 指向克隆存储库 HEAD 所指向的分支，而是指向 <name> 提交"
"Create a shallow clone with a history truncated to the specified number of commits" = "创建一个浅克隆，其历史记录被截断为指定的提交次数"
"Cloning to '%s' completed, spent: %v.\n" = "克隆到：'%s' 完成，耗时：%v。\n"
"After the clone is created, initialize and clone submodules within based on the provided pathspec" = "创建克隆后，根据提供的路径规范初始化并克隆其中的子模块"
"Linearize repository history" = "线性化存储库历史"
"Linearize the specified branch history" = "线性化指定分支历史"
"Keep the number of commits, 0 keeps all commits" = "保留 commit 数量，0 保留所有 commits"
"unbranch unspecified branch mode is incompatible with --keep" = "unbranch 未指定分支模式与 --keep 不兼容"
"Prune all unreachable objects from the object database" = "从对象数据库中删除所有无法访问的对象"
# snapshot
"Create a snapshot commit for the worktree" = "为工作树创建快照提交"
"Create an orphan commit" = "创建一个孤儿提交"
"Push the worktree snapshot commit to the remote" = "将工作树快照提交推送到远程"
"ID of a parent commit object" = "父提交对象 ID"
"Use the given as the commit message. Concatenate multiple -m options as separate paragraphs" = "使用给定的作为提交说明。多个 -m 选项的值会作为独立段落合并"
"Take the commit message from the given file. Use - to read the message from the standard input" = "从给定文件中获取提交消息。 使用 - 从标准输入读取消息"
"Force updates" = "强制更新"
"Aborting commit due to empty commit message." = "终止提交因为提交说明为空。"
"new snapshot commit:" = "新的快照提交："
"Cleanup unnecessary files and optimize the local repository" = "清除不必要的文件和优化本地仓库"
# az
"Analyze repository large files" = "分析存储大文件"
# prune-refs
"Prune refs by prefix" = "清理指定前缀的引用"
"Reference prefixes that need to be cleaned up" = "需要清理的引用前缀"
"Cleanup references using default prefix" = "清理默认前缀的的引用"
"Remove more dirty references" = "删除更多的脏引用"
"Dry run" = "演习"
